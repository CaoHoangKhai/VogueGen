import React, { useState, useEffect } from "react";
import { useParams, useLocation } from "react-router-dom";
import { Modal, Button, Form, OverlayTrigger, Tooltip } from "react-bootstrap";
import { getSizesByDesignId } from "../api/Size/size.api";
import { addToCart } from "../api/Cart/cart.api";
import html2canvas from "html2canvas";

const AddToCartButton = ({
  frontContainerRef,    // üëâ ref m·∫∑t tr∆∞·ªõc t·ª´ TShirtDesign
  backContainerRef,     // üëâ ref m·∫∑t sau t·ª´ TShirtDesign
  design,               // üëâ object thi·∫øt k·∫ø
  selectedColor,         // üëâ m√†u √°o ƒëang ch·ªçn
  productId
}) => {
  const { id } = useParams();
  const location = useLocation();
  const isDesignPage = location.pathname.includes("/design");

  const [availableSizes, setAvailableSizes] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedSizes, setSelectedSizes] = useState([]);
  const [quantities, setQuantities] = useState({});
  const [loading, setLoading] = useState(false);
  // üü¢ L·∫•y size theo thi·∫øt k·∫ø (designId)
  useEffect(() => {
    const fetchSizes = async () => {
      try {
        const sizes = await getSizesByDesignId(id);
        setAvailableSizes(sizes);
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y size:", err);
        alert("‚ùå L·ªói khi l·∫•y size s·∫£n ph·∫©m!");
      }
    };
    if (id) fetchSizes();
  }, [id]);

  // üì∏ H√†m ch·ª•p Base64
  const captureDesignAsBase64 = async (containerRef) => {
    if (!containerRef?.current) return null;

    // ‚úÖ L∆∞u tr·∫°ng th√°i hi·ªÉn th·ªã c≈©
    const prevDisplay = containerRef.current.style.display;

    // ‚úÖ N·∫øu b·ªã ·∫©n, t·∫°m b·∫≠t l√™n
    if (prevDisplay === "none") {
      containerRef.current.style.display = "block";
    }

    // ‚úÖ ·∫®n border (n·∫øu c√≥)
    const overlayEl = containerRef.current.querySelector(".position-absolute");
    const prevBorder = overlayEl?.style.border;
    if (overlayEl) overlayEl.style.border = "none";

    // ‚úÖ Ch·ª•p canvas
    const canvas = await html2canvas(containerRef.current, {
      useCORS: true,
      backgroundColor: null,
    });

    // ‚úÖ Kh√¥i ph·ª•c border
    if (overlayEl) overlayEl.style.border = prevBorder;

    // ‚úÖ Kh√¥i ph·ª•c display
    containerRef.current.style.display = prevDisplay;

    return canvas.toDataURL("image/png");
  };

  // ‚úÖ Ch·ªçn size
  const handleSizeChange = (size) => {
    setSelectedSizes((prev) =>
      prev.includes(size) ? prev.filter((s) => s !== size) : [...prev, size]
    );
  };

  // ‚úÖ Nh·∫≠p s·ªë l∆∞·ª£ng
  const handleQuantityChange = (size, value) => {
    setQuantities((prev) => ({
      ...prev,
      [size]: Number(value),
    }));
  };

  // ‚úÖ Khi nh·∫•n x√°c nh·∫≠n
  const MAX_QUANTITY = 10000;

  const handleConfirm = async () => {
    try {
      if (selectedSizes.length === 0) {
        alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt size!");
        return;
      }

      // üö® Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu
      const invalidQuantity = selectedSizes.some(size => !quantities[size] || quantities[size] < 50);
      if (invalidQuantity) {
        alert("üö® M·ªói size ph·∫£i nh·∫≠p t·ªëi thi·ªÉu 50 s·∫£n ph·∫©m!");
        return;
      }

      // üö® Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªëi ƒëa
      const tooLargeQuantity = selectedSizes.some(size => quantities[size] > MAX_QUANTITY);
      if (tooLargeQuantity) {
        alert(`üö® M·ªói size ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t t·ªëi ƒëa ${MAX_QUANTITY} s·∫£n ph·∫©m!`);
        return;
      }

      const user = JSON.parse(localStorage.getItem("user"));
      const userId = user?._id;
      if (!userId) {
        alert("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
        return;
      }

      setLoading(true);

      let frontImageBase64 = null;
      let backImageBase64 = null;
      if (isDesignPage) {
        if (frontContainerRef) frontImageBase64 = await captureDesignAsBase64(frontContainerRef);
        if (backContainerRef) backImageBase64 = await captureDesignAsBase64(backContainerRef);
      }

      // üìù G·ªôp t·∫•t c·∫£ item v√†o 1 request (n·∫øu backend h·ªó tr·ª£)
      const payload = selectedSizes.map(size => ({
        manguoidung: userId,
        masanpham: productId,
        soluong: quantities[size],
        size,
        mausac: selectedColor || "#000000",
        isThietKe: isDesignPage,
        madesign: isDesignPage ? id : null,
        previewFront: isDesignPage ? frontImageBase64 : null,
        previewBack: isDesignPage ? backImageBase64 : null,
      }));

      console.log("üõí Payload g·ª≠i:", payload);

      for (const item of payload) {
        await addToCart(item);
      }

      alert("üéâ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
      handleClose();

    } catch (err) {
      console.error("‚ùå [handleConfirm] L·ªói:", err.message || err);
      alert("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng!");
    } finally {
      setLoading(false);
    }
  };


  // ‚úÖ M·ªü/ƒë√≥ng modal
  const handleOpen = () => setShowModal(true);
  const handleClose = () => {
    setSelectedSizes([]);
    setQuantities({});
    setShowModal(false);
  };
  return (
    <>
      {/* üõí N√∫t gi·ªè h√†ng */}
      <OverlayTrigger placement="top" overlay={<Tooltip>Th√™m v√†o gi·ªè h√†ng</Tooltip>}>
        <button
          className="btn btn-outline-success mt-2"
          onClick={handleOpen}
          style={{ outline: "2px solid #198754", outlineOffset: "2px" }}
        >
          üõí
        </button>
      </OverlayTrigger>

      {/* üì¶ Modal ch·ªçn size & s·ªë l∆∞·ª£ng */}
      <Modal show={showModal} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>Ch·ªçn Size v√† S·ªë l∆∞·ª£ng</Modal.Title>
        </Modal.Header>

        <Modal.Body>
          <Form>
            {availableSizes.length > 0 ? (
              availableSizes.map((size) => (
                <div
                  key={size}
                  className="mb-3 border-bottom pb-2"
                  style={{ outline: "1px dashed #ccc", padding: "10px" }}
                >
                  <Form.Check
                    type="checkbox"
                    label={`Size ${size}`}
                    checked={selectedSizes.includes(size)}
                    onChange={() => handleSizeChange(size)}
                  />
                  {selectedSizes.includes(size) && (
                    <Form.Control
                      className="mt-2"
                      type="number"
                      placeholder="S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu 50"
                      min={50}
                      style={{ outline: "1px solid #ccc" }}
                      value={quantities[size] || ""}
                      onChange={(e) => handleQuantityChange(size, e.target.value)}
                    />
                  )}
                </div>
              ))
            ) : (
              <p>‚ö†Ô∏è Kh√¥ng c√≥ size n√†o kh·∫£ d·ª•ng.</p>
            )}
          </Form>
        </Modal.Body>

        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            H·ªßy
          </Button>
          <Button variant="outline-success" onClick={handleConfirm}>
            X√°c nh·∫≠n
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default AddToCartButton;

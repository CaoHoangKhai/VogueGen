import React, { useState, useEffect } from "react";
import { useParams, useLocation } from "react-router-dom";
import { Modal, Button, Form, OverlayTrigger, Tooltip } from "react-bootstrap";
import { getSizesByDesignId } from "../api/Size/size.api";

const AddToCartButton = ({ onAddToCart, showToast }) => {
    const { id } = useParams();
    const location = useLocation();
    const isDesignPage = location.pathname.includes("/design");

    const [availableSizes, setAvailableSizes] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [selectedSizes, setSelectedSizes] = useState([]);
    const [quantities, setQuantities] = useState({});

    useEffect(() => {
        const fetchSizes = async () => {
            try {
                const sizes = await getSizesByDesignId(id);
                setAvailableSizes(sizes);
            } catch (err) {
                console.error("L·ªói khi l·∫•y size:", err);
                showToast?.("L·ªói khi l·∫•y size s·∫£n ph·∫©m!", "error");
            }
        };
        if (id) fetchSizes();
    }, [id, showToast]);

    const handleOpen = () => setShowModal(true);
    const handleClose = () => {
        setSelectedSizes([]);
        setQuantities({});
        setShowModal(false);
    };

    const handleSizeChange = (size) => {
        setSelectedSizes((prev) =>
            prev.includes(size) ? prev.filter((s) => s !== size) : [...prev, size]
        );
    };

    {/*Ch·ªânh l·∫°i s·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 50*/ }
    const handleQuantityChange = (size, value) => {
        setQuantities((prev) => ({
            ...prev,
            [size]: Number(value),
        }));
    };

    const handleConfirm = () => {
        if (selectedSizes.length === 0) {
            showToast?.("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt size!", "warning");
            return;
        }

        // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng ph·∫£i >= 50
        const invalidQuantity = selectedSizes.some(
            (size) => !quantities[size] || quantities[size] < 50
        );
        if (invalidQuantity) {
            showToast?.("üö® M·ªói size ph·∫£i nh·∫≠p t·ªëi thi·ªÉu 50 s·∫£n ph·∫©m!", "warning");
            return;
        }

        const selectedItems = selectedSizes.map((size) => {
            const item = {
                size,
                quantity: quantities[size],
                mausac: "#000000",
            };

            if (isDesignPage) {
                item.madesign = id;
                item.masanpham = "ID_S·∫¢N_PH·∫®M_THI·∫æT_K·∫æ";
            } else {
                item.masanpham = id;
            }

            return item;
        });

        selectedItems.forEach((item) => {
            onAddToCart?.(item);
        });

        showToast?.("üéâ ƒê√£ th√™m v√†o gi·ªè h√†ng!", "success");
        handleClose();
    };
    return (
        <>
            <OverlayTrigger
                placement="top"
                overlay={<Tooltip>Th√™m v√†o gi·ªè h√†ng</Tooltip>}
            >
                <button
                    className="btn btn-outline-success mt-2"
                    onClick={handleOpen}
                    style={{ outline: "2px solid #198754", outlineOffset: "2px" }}
                >
                    üõí
                </button>
            </OverlayTrigger>

            <Modal show={showModal} onHide={handleClose} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Ch·ªçn Size v√† S·ªë l∆∞·ª£ng</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        {availableSizes.length > 0 ? (
                            availableSizes.map((size) => (
                                <div
                                    key={size}
                                    className="mb-3 border-bottom pb-2"
                                    style={{ outline: "1px dashed #ccc", padding: "10px" }}
                                >
                                    <Form.Check
                                        type="checkbox"
                                        label={`Size ${size}`}
                                        checked={selectedSizes.includes(size)}
                                        onChange={() => handleSizeChange(size)}
                                    />
                                    {selectedSizes.includes(size) && (
                                        <Form.Control
                                            className="mt-2"
                                            type="number"
                                            placeholder="S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu 50"
                                            min={50}
                                            style={{ outline: "1px solid #ccc" }}
                                            value={quantities[size] || ""}
                                            onChange={(e) =>
                                                handleQuantityChange(size, e.target.value)
                                            }
                                        />
                                    )}
                                </div>
                            ))
                        ) : (
                            <p>Kh√¥ng c√≥ size n√†o kh·∫£ d·ª•ng.</p>
                        )}
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="outline-secondary" onClick={handleClose}>
                        H·ªßy
                    </Button>
                    <Button variant="outline-success" onClick={handleConfirm}>
                        X√°c nh·∫≠n
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
};

export default AddToCartButton;
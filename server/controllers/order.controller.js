const MongoDB = require("../utils/mongodb.util");
const OrderService = require("../services/order.service");
const DesignService = require("../services/design.service");

exports.createOrder = async (req, res) => {
    try {
        console.log("üì¶ [createOrder] B·∫ÆT ƒê·∫¶U X·ª¨ L√ù");

        if (!req.body || Object.keys(req.body).length === 0) {
            console.warn("‚ö†Ô∏è [createOrder] Thi·∫øu d·ªØ li·ªáu ƒë∆°n h√†ng trong request body.");
            return res.status(400).json({
                success: false,
                message: "Thi·∫øu d·ªØ li·ªáu ƒë∆°n h√†ng trong y√™u c·∫ßu."
            });
        }

        console.log("üì• [createOrder] D·ªÆ LI·ªÜU CLIENT G·ª¨I L√äN:", JSON.stringify(req.body, null, 2));

        const service = new OrderService(MongoDB.client);
        const result = await service.createOrder(req.body);

        console.log("‚úÖ [createOrder] K·∫æT QU·∫¢ TR·∫¢ V·ªÄ:", JSON.stringify(result, null, 2));

        return res.status(result.success ? 201 : 400).json(result);
    } catch (error) {
        console.error("üî• [createOrder] L·ªói:", error.message);
        return res.status(500).json({
            success: false,
            message: "L·ªói server khi t·∫°o ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};

exports.getAllOrdersSorted = async (req, res) => {
    try {
        console.log("üì• [getAllOrdersSorted] Y√äU C·∫¶U L·∫§Y TO√ÄN B·ªò ƒê∆†N H√ÄNG (admin)");

        const service = new OrderService(MongoDB.client);
        const orders = await service.getAllOrdersSorted();

        console.log(`‚úÖ [getAllOrdersSorted] T√¨m th·∫•y ${orders.length} ƒë∆°n h√†ng`);

        res.status(200).json(orders);
    } catch (error) {
        console.error("üî• [getAllOrdersSorted] L·ªói:", error.message);
        res.status(500).json({
            success: false,
            message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};

exports.getOrdersByUserId = async (req, res) => {
    try {
        const { userId } = req.params;
        console.log("üì• [getOrdersByUserId] Y√™u c·∫ßu l·∫•y ƒë∆°n h√†ng theo userId:", userId);

        const service = new OrderService(MongoDB.client);
        const result = await service.getOrdersByUserId(userId);

        console.log("‚úÖ [getOrdersByUserId] K·∫øt qu·∫£ tr·∫£ v·ªÅ:", JSON.stringify(result, null, 2));

        res.status(result.success ? 200 : 404).json(result);
    } catch (error) {
        console.error("üî• [getOrdersByUserId] L·ªói:", error.message);
        res.status(500).json({
            success: false,
            message: "L·ªói server khi l·∫•y ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};


exports.getOrderDetailById = async (req, res) => {
    try {
        const { orderId } = req.params;
        console.log("üì• [getOrderDetailById] Y√™u c·∫ßu l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", orderId);

        const orderService = new OrderService(MongoDB.client);
        const designService = new DesignService(MongoDB.client);

        const result = await orderService.getOrderByIdWithDetails(orderId);

        if (!result.success) {
            console.warn("‚ùå [getOrderDetailById] Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
            return res.status(404).json(result);
        }

        // ‚úÖ X·ª≠ l√Ω ph·∫ßn th√™m designLink n·∫øu c√≥ madesign
        const updatedDetails = await Promise.all(
            result.data.chitiet.map(async (item) => {
                if (item.madesign) {
                    const link = await designService.getDesignLink(item.madesign);
                    return { ...item, designLink: link || null };
                }
                return item;
            })
        );

        // G√°n l·∫°i v√†o ƒë∆°n h√†ng
        result.data.chitiet = updatedDetails;

        console.log("‚úÖ [getOrderDetailById] Chi ti·∫øt ƒë∆°n h√†ng:", JSON.stringify(result.data, null, 2));
        res.status(200).json(result);

    } catch (error) {
        console.error("üî• [getOrderDetailById] L·ªói:", error.message);
        res.status(500).json({
            success: false,
            message: "L·ªói server khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};


exports.getLatestPendingOrders = async (req, res) => {
    try {
        const orderService = new OrderService(MongoDB.client);
        const result = await orderService.getLatestPendingOrders(5);

        if (!result.success) {
            return res.status(500).json({ message: result.message });
        }

        return res.json(result.data);
    } catch (error) {
        console.error("‚ùå [getLatestPendingOrders] L·ªói:", error.message);
        return res.status(500).json({ message: "L·ªói khi l·∫•y ƒë∆°n h√†ng m·ªõi nh·∫•t" });
    }
};

exports.countOrdersByUser = async (req, res) => {
    try {
        const userId = req.params.userId;
        const orderService = new OrderService(MongoDB.client);
        console.log("üì• [countOrdersByUser] Y√™u c·∫ßu ƒë·∫øm ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng:", userId);
        const result = await orderService.getTotalOrdersByUserId(userId);
        res.send(result);
    } catch (error) {
        console.error("‚ùå [countOrdersByUser] L·ªói:", error.message);
        res.status(500).send({
            success: false,
            message: "L·ªói server khi t√≠nh t·ªïng ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};

exports.getTotalSpentByUser = async (req, res) => {
    try {
        const { userId } = req.params;
        const orderService = new OrderService(MongoDB.client);
        const result = await orderService.getTotalSpentByUserId(userId);

        if (!result.success) {
            return res.status(400).json({
                success: false,
                message: result.message || "Kh√¥ng th·ªÉ t√≠nh t·ªïng ti·ªÅn ƒë√£ ti√™u."
            });
        }

        return res.status(200).json(result);
    } catch (error) {
        console.error("‚ùå [getTotalSpentByUser] Controller L·ªói:", error.message);
        return res.status(500).json({
            success: false,
            message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y t·ªïng ti·ªÅn ƒë√£ ti√™u.",
            error: error.message
        });
    }
};
exports.cancelOrder = async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!orderId) {
            return res.status(400).json({
                success: false,
                message: "Thi·∫øu m√£ ƒë∆°n h√†ng.",
            });
        }
        const orderService = new OrderService(MongoDB.client);
        const result = await orderService.cancelOrder(orderId);

        if (!result.success) {
            return res.status(400).json(result);
        }

        return res.status(200).json(result);
    } catch (error) {
        console.error("‚ùå [cancelOrder] L·ªói controller:", error.message);
        return res.status(500).json({
            success: false,
            message: "L·ªói server khi hu·ª∑ ƒë∆°n h√†ng.",
            error: error.message,
        });
    }
};

exports.updateOrderStatus = async (req, res) => {
    try {
        const { orderId } = req.params;
        const { trangthai } = req.body;

        console.log("‚û°Ô∏è [updateOrderStatus] orderId:", orderId);
        console.log("‚û°Ô∏è [updateOrderStatus] trangthai (body):", trangthai);

        const orderService = new OrderService(MongoDB.client);
        const result = await orderService.updateTrangThaiDonHang(orderId, trangthai);

        console.log("‚úÖ [updateOrderStatus] K·∫øt qu·∫£ update:", result);

        if (!result.success) {
            console.warn("‚ö†Ô∏è [updateOrderStatus] Kh√¥ng th√†nh c√¥ng:", result.message);
            return res.status(400).json(result);
        }

        return res.status(200).json(result);
    } catch (error) {
        console.error("‚ùå [updateOrderStatus] L·ªói controller:", error.message);
        return res.status(500).json({
            success: false,
            message: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.",
            error: error.message
        });
    }
};


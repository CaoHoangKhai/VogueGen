const fs = require("fs");
const path = require("path");
const ProductServer = require("../services/product.service");
const MongoDB = require("../utils/mongodb.util");

exports.createProduct = async (req, res, next) => {
  try {
    console.log("üì¶ D·ªÆ LI·ªÜU CLIENT G·ª¨I L√äN:");
    console.log("Body:", req.body);

    // X·ª≠ l√Ω kichthuoc
    // K√≠ch th∆∞·ªõc c√≥ th·ªÉ n·∫±m trong req.body.kichthuoc ho·∫∑c req.body.sizes
    let kichthuocParsed = [];
    const kichthuocRaw = req.body.kichthuoc || req.body.sizes || "[]";
    try {
      kichthuocParsed = typeof kichthuocRaw === "string" ? JSON.parse(kichthuocRaw) : kichthuocRaw;
    } catch {
      return res.status(400).json({ error: "D·ªØ li·ªáu k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá" });
    }

    // M√†u s·∫Øc c√≥ th·ªÉ n·∫±m trong req.body.mausac ho·∫∑c req.body.colors
    let mausacParsed = [];
    const mausacRaw = req.body.mausac || req.body.colors || "[]";
    try {
      mausacParsed = typeof mausacRaw === "string" ? JSON.parse(mausacRaw) : mausacRaw;
    } catch {
      return res.status(400).json({ error: "D·ªØ li·ªáu m√†u s·∫Øc kh√¥ng h·ª£p l·ªá" });
    }


    // X·ª≠ l√Ω images
    let images = [];
    if (req.files && Array.isArray(req.files) && req.files.length > 0) {
      images = req.files.map((file) => ({
        tenfile: file.filename,
      }));
    } else if (Array.isArray(req.body.images)) {
      images = req.body.images;
    } else if (typeof req.body.images === "string") {
      try {
        images = JSON.parse(req.body.images);
      } catch {
        return res.status(400).json({ error: "D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá" });
      }
    }

    // Parse gi√° s·∫£n ph·∫©m chu·∫©n (ch·ªâ s·ªë nguy√™n)
    const giaSanPham = Number(req.body.giasanpham) || 0;

    // T·∫°o object ƒë·ªÉ g·ªçi service
    const newProductData = {
      tensanpham: req.body.tensanpham || "",
      giasanpham: giaSanPham,
      theloai: req.body.theloai || "",
      mota: req.body.mota || "",
      ngaythem: new Date(),
      kichthuoc: kichthuocParsed,
      mausanpham: mausacParsed, // ƒê√£ ƒë·ªïi t√™n tr∆∞·ªùng cho ƒë·ªìng b·ªô
      hinhanh: images,          // ƒê√£ ƒë·ªïi t√™n tr∆∞·ªùng cho ƒë·ªìng b·ªô
    };

    // G·ªçi service t·∫°o s·∫£n ph·∫©m
    const productService = new ProductServer(MongoDB.client);
    const result = await productService.createProduct(newProductData);

    // Di chuy·ªÉn file ·∫£nh n·∫øu c√≥ upload
    if (req.files && Array.isArray(req.files) && req.files.length > 0) {
      const destDir = path.join(__dirname, "..", "public", "images");
      if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });

      for (const file of req.files) {
        const oldPath = file.path;
        const newPath = path.join(destDir, file.filename);
        try {
          await fs.promises.rename(oldPath, newPath);
          console.log(`‚úÖ ƒê√£ di chuy·ªÉn: ${file.originalname} -> ${file.filename}`);
        } catch (err) {
          console.error("‚ùå L·ªói khi di chuy·ªÉn ·∫£nh:", err);
        }
      }
    }

    if (result.success) {
      res.status(201).json({
        message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng",
        id: result.productId || result.id,
      });
    } else {
      res.status(400).json({ error: result.message || "Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m" });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi t·∫°o s·∫£n ph·∫©m" });
  }
};


exports.getAllProducts = async (req, res) => {
  try {
    const productService = new ProductServer(MongoDB.client);
    const products = await productService.getAllProducts();
    res.json(products);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m" });
  }
}

exports.getAllProductsHome = async (req, res) => {
  try {
    const productService = new ProductServer(MongoDB.client);
    const products = await productService.getAllProductsHome();
    res.json(products);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m" });
  }
}

exports.getProductById = async (req, res) => {
  try {
    console.log("Product ID nh·∫≠n ƒë∆∞·ª£c:", req.params.id);

    const productService = new ProductServer(MongoDB.client);
    const result = await productService.getProductById(req.params.id);

    if (!result.success) {
      return res.status(404).json({ message: result.message || "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    return res.status(200).json(result.data);
  } catch (error) {
    console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y s·∫£n ph·∫©m" });
  }
};

exports.updateProduct = async (req, res) => {
  try {
    console.log("üì¶ D·ªÆ LI·ªÜU CLIENT G·ª¨I L√äN:");
    console.log("Body:", req.body);
    console.log("Files:", req.files);

    // 1. Parse k√≠ch th∆∞·ªõc
    let kichthuocParsed = [];
    if (req.body.kichthuoc) {
      try {
        kichthuocParsed = typeof req.body.kichthuoc === 'string'
          ? JSON.parse(req.body.kichthuoc)
          : req.body.kichthuoc;
      } catch {
        return res.status(400).json({ error: "‚ùå D·ªØ li·ªáu k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá" });
      }
    }

    // 2. Parse m√†u s·∫Øc
    let mauParsed = [];
    if (req.body.mausanpham) {
      try {
        mauParsed = typeof req.body.mausanpham === 'string'
          ? JSON.parse(req.body.mausanpham)
          : req.body.mausanpham;
      } catch {
        return res.status(400).json({ error: "‚ùå D·ªØ li·ªáu m√†u s·∫Øc kh√¥ng h·ª£p l·ªá" });
      }
    }

    // 3. Parse h√¨nh ·∫£nh (gi·ªØ ·∫£nh c≈©, th√™m ·∫£nh m·ªõi)
    let hinhanh = [];
    let imagesObj = req.body.images;
    if (imagesObj) {
      try {
        if (typeof imagesObj === "string") {
          imagesObj = JSON.parse(imagesObj);
        }
        // ·∫¢nh c≈©
        if (Array.isArray(imagesObj.old)) {
          hinhanh = imagesObj.old.map(filename => ({ tenfile: filename }));
        }
      } catch {
        return res.status(400).json({ error: "D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá" });
      }
    }

    // Th√™m ·∫£nh m·ªõi t·ª´ req.files
    if (req.files && Array.isArray(req.files) && req.files.length > 0) {
      const destDir = path.join(__dirname, "..", "public", "images");
      if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });

      for (const file of req.files) {
        const oldPath = file.path;
        const newPath = path.join(destDir, file.filename);
        try {
          await fs.promises.rename(oldPath, newPath);
          console.log(`‚úÖ ƒê√£ di chuy·ªÉn: ${file.originalname} -> ${file.filename}`);
          hinhanh.push({ tenfile: file.filename });
        } catch (err) {
          console.error("‚ùå L·ªói khi di chuy·ªÉn ·∫£nh:", err);
        }
      }
    }
    // 4. Parse gi√° s·∫£n ph·∫©m
    const giaSanPham = parseInt(
      req.body.giasanpham?.toString().replace(/[^\d]/g, ""),
      10
    ) || 0;

    // 5. Parse ng√†y th√™m s·∫£n ph·∫©m (n·∫øu c√≥)
    const ngayThem = req.body.ngaythem
      ? new Date(req.body.ngaythem)
      : new Date();

    // 6. T·∫°o payload s·∫°ch s·∫Ω
    const updateData = {
      tensanpham: req.body.tensanpham,
      giasanpham: giaSanPham,
      theloai: req.body.theloai,
      mota: req.body.mota,
      ngaythem: ngayThem,
      kichthuoc: kichthuocParsed,
      mausanpham: mauParsed,
      hinhanh: hinhanh
    };

    // 7. G·ªçi service x·ª≠ l√Ω
    const productService = new ProductServer(MongoDB.client);
    const result = await productService.updateProduct(req.params.id, updateData);

    return res.status(200).json({ success: true, message: result.message });

  } catch (error) {
    return res.status(500).json({ success: false, message: result.message });
  }
};

exports.deleteProduct = async (req, res) => {
  try {
    const productService = new ProductServer(MongoDB.client);
    const result = await productService.deleteProduct(req.params.id);
    res.json(result);
  } catch (error) {
    console.error("L·ªói khi xo√° s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi xo√° s·∫£n ph·∫©m" });
  }
}


exports.searchProducts = async (req, res) => {
  try {
    const keyword = req.query.q;
    if (!keyword) {
      return res.status(400).json({ error: "Thi·∫øu t·ª´ kho√° t√¨m ki·∫øm" });
    }
    const results = await productService.searchProductByName(keyword);
    res.json(results);
  } catch (error) {
    console.error("L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi t√¨m ki·∫øm s·∫£n ph·∫©m" });
  }
}


const fs = require("fs");
const path = require("path");
const ProductServer = require("../services/product.service");
const MongoDB = require("../utils/mongodb.util");
const crypto = require("crypto");
const { ObjectId } = require("mongodb");

exports.createProduct = async (req, res) => {
  try {
    console.log("üü° [CREATE PRODUCT] Nh·∫≠n d·ªØ li·ªáu:", req.body);

    // Parse k√≠ch th∆∞·ªõc
    let kichthuoc = [];
    try {
      const raw = req.body.kichthuoc || req.body.sizes || "[]";
      kichthuoc = typeof raw === "string" ? JSON.parse(raw) : raw;
      console.log("‚úÖ Parsed k√≠ch th∆∞·ªõc:", kichthuoc);
    } catch {
      console.warn("‚ùå Kh√¥ng parse ƒë∆∞·ª£c k√≠ch th∆∞·ªõc");
      return res.status(400).json({ error: "D·ªØ li·ªáu k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá" });
    }

    // Parse m√†u s·∫Øc
    let mausanpham = [];
    try {
      const raw = req.body.mausac || req.body.colors?.[""] || "[]";
      mausanpham = typeof raw === "string" ? JSON.parse(raw) : raw;
      console.log("‚úÖ Parsed m√†u s·∫Øc:", mausanpham);
    } catch {
      console.warn("‚ùå Kh√¥ng parse ƒë∆∞·ª£c m√†u s·∫Øc");
      return res.status(400).json({ error: "D·ªØ li·ªáu m√†u s·∫Øc kh√¥ng h·ª£p l·ªá" });
    }

    // Parse gi·ªõi t√≠nh
    const gioitinh = req.body.gioitinh?.toLowerCase() || "";
    if (!["nam", "nu","unisex"].includes(gioitinh)) {
      return res.status(400).json({ error: "Gi·ªõi t√≠nh ch·ªâ ƒë∆∞·ª£c ph√©p l√† 'nam' ho·∫∑c 'nu'" });
    }

    // X·ª≠ l√Ω h√¨nh ·∫£nh upload
    let hinhanh = [];
    if (req.files && Array.isArray(req.files)) {
      console.log(`üì¶ ƒêang x·ª≠ l√Ω ${req.files.length} file ·∫£nh...`);
      for (let index = 0; index < req.files.length; index++) {
        const file = req.files[index];
        const fileBuffer = fs.readFileSync(file.path);
        const hash = crypto.createHash("md5").update(fileBuffer).digest("hex");

        const imageData = {
          hash,
          data: fileBuffer,
          contentType: file.mimetype,
          tenfile: file.originalname,
          color: req.body.colors?.[index] || null,
          position: req.body.positions?.[index] || null,
        };
        hinhanh.push(imageData);

        console.log(`‚úÖ ·∫¢nh ${index + 1}:`, {
          tenfile: file.originalname,
          color: imageData.color,
          position: imageData.position,
          hash,
        });

        await fs.promises.unlink(file.path); // X√≥a file t·∫°m
      }
    } else {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ file ·∫£nh n√†o ƒë∆∞·ª£c g·ª≠i l√™n.");
    }

    // Parse gi√° s·∫£n ph·∫©m
    const giaSanPham = Number(req.body.giasanpham) || 0;

    // T·ªïng h·ª£p d·ªØ li·ªáu t·∫°o s·∫£n ph·∫©m
    const newProductData = {
      tensanpham: req.body.tensanpham || "",
      giasanpham: giaSanPham,
      theloai: req.body.theloai || "",
      mota: req.body.mota || "",
      ngaythem: new Date(),
      kichthuoc,
      mausanpham,
      hinhanh,
      gioitinh,
    };

    console.log("üì§ D·ªØ li·ªáu chu·∫©n b·ªã insert:", newProductData);

    // G·ªçi service t·∫°o s·∫£n ph·∫©m
    const productService = new ProductServer(MongoDB.client);
    const result = await productService.createProduct(newProductData);

    // Tr·∫£ k·∫øt qu·∫£
    if (result.success) {
      console.log("‚úÖ T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng:", result.productId);
      res.status(201).json({
        message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng",
        id: result.productId,
      });
    } else {
      console.warn("‚ùå Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m:", result.message);
      res.status(400).json({ error: result.message || "Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m" });
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
    res.status(500).json({ error: "L·ªói server khi t·∫°o s·∫£n ph·∫©m" });
  }
};

exports.getProductById = async (req, res) => {
  const { productId } = req.params;
  console.log("üì• L·∫•y s·∫£n ph·∫©m theo ID:", productId);

  const productService = new ProductServer(MongoDB.client);
  const product = await productService.getProductById(productId);

  if (product) {
    console.log("‚úÖ T√¨m th·∫•y s·∫£n ph·∫©m:", product._id);
    res.json(product);
  } else {
    console.warn("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
    res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
  }
};


exports.getAllProducts = async (req, res) => {
  console.log("üì• Y√™u c·∫ßu l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m");
  const productService = new ProductServer(MongoDB.client);
  const products = await productService.getAllProducts();
  console.log(`‚úÖ Tr·∫£ v·ªÅ ${products.length} s·∫£n ph·∫©m`);
  res.json(products);
};

exports.getImagesByColor = async (req, res) => {
  try {
    const { productId, color } = req.params;
    console.log("üì• Nh·∫≠n y√™u c·∫ßu l·∫•y ·∫£nh theo m√†u:", { productId, color });

    if (!ObjectId.isValid(productId)) {
      console.warn("‚ùå ID kh√¥ng h·ª£p l·ªá:", productId);
      return res.status(400).json({ error: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá" });
    }

    const productService = new ProductServer(MongoDB.client);
    const result = await productService.getImagesByColor(productId, color);

    if (result.success) {
      console.log(`‚úÖ T√¨m th·∫•y ${result.images.length} ·∫£nh cho m√†u ${color}`);
      return res.status(200).json(result.images);
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh ho·∫∑c l·ªói truy v·∫•n:", result.message);
      return res.status(404).json({ error: result.message || "Kh√¥ng t√¨m th·∫•y ·∫£nh" });
    }
  } catch (error) {
    console.error("‚ùå L·ªói controller getImagesByColor:", error);
    return res.status(500).json({ error: "L·ªói server khi l·∫•y ·∫£nh theo m√†u" });
  }
};

exports.getFullProductsByCategorySlug = async (req, res) => {
  try {
    const { slug } = req.params;
    console.log("üì• L·∫•y s·∫£n ph·∫©m theo slug danh m·ª•c:", slug);

    const productService = new ProductServer(MongoDB.client);
    const products = await productService.getFullProductsByCategorySlug(slug);

    if (!products || products.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi slug:", slug);
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong danh m·ª•c n√†y." });
    }

    console.log(`‚úÖ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m v·ªõi slug ${slug}`);
    res.json(products);
  } catch (error) {
    console.error("‚ùå L·ªói getProductByCategorySlug:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß." });
  }
};

exports.getColorsByProductId = async (req, res) => {
  try {
    const { id } = req.params;
    console.log("üì• L·∫•y m√†u theo productId:", id);

    if (!ObjectId.isValid(id)) {
      console.warn("‚ùå ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá:", id);
      return res.status(400).json({
        success: false,
        message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.",
      });
    }

    const productService = new ProductServer(MongoDB.client);
    const result = await productService.getColorsByProductId(new ObjectId(id));

    if (!result.success) {
      console.warn("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√†u:", result.message);
      return res.status(500).json(result);
    }

    console.log(`‚úÖ L·∫•y th√†nh c√¥ng ${result.colors?.length || 0} m√†u`);
    res.json(result);
  } catch (error) {
    console.error("üî¥ [GET COLORS BY PRODUCT ID] Error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y m√†u theo s·∫£n ph·∫©m.",
      error: error.message,
    });
  }
};

exports.getTopSellingProducts = async (req, res) => {
  try {
    const productService = new ProductServer(MongoDB.client);
    const topProducts = await productService.getBestSellingProducts();

    if (topProducts.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m b√°n ch·∫°y."
      });
    }

    res.status(200).json({
      success: true,
      products: topProducts
    });
  } catch (error) {
    console.error("üî• [getTopSellingProducts] L·ªói:", error.message);
    res.status(500).json({
      success: false,
      message: "L·ªói khi truy v·∫•n s·∫£n ph·∫©m b√°n ch·∫°y.",
      error: error.message
    });
  }
};
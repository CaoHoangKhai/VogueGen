const UserService = require("../services/user.service");
const LocationService = require("../services/location.service");
const OrderService = require("../services/order.service");
const MongoDB = require("../utils/mongodb.util");

exports.findOne = async (req, res, next) => {
    try {
        const { userId } = req.params;
        console.log("üì• [findOne] Nh·∫≠n ID:", userId);

        if (!userId) {
            console.warn("‚ö†Ô∏è [findOne] Thi·∫øu m√£ ng∆∞·ªùi d√πng");
            return res.status(400).json({ message: "Thi·∫øu m√£ ng∆∞·ªùi d√πng" });
        }

        const userService = new UserService(MongoDB.client);
        const user = await userService.findUserById(userId);
        console.log("üîç [findOne] Ng∆∞·ªùi d√πng:", user);

        if (!user) {
            console.warn("‚ùå [findOne] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng:", userId);
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }

        const locationService = new LocationService(MongoDB.client);
        const addressCount = await locationService.countUserLocations(userId);
        console.log("üì¶ [findOne] S·ªë ƒë·ªãa ch·ªâ:", addressCount);

        return res.json({ ...user, sodiachi: addressCount });
    } catch (error) {
        console.error("üî• [findOne] L·ªói:", error);
        return res.status(500).json({ message: `L·ªói: ${error.message}` });
    }
};

exports.addUserLocation = async (req, res, next) => {
    try {
        const locationService = new LocationService(MongoDB.client);
        const payload = req.body;
        console.log("üì• [addUserLocation] Payload:", payload);

        if (!payload.manguoidung || !payload.thanhpho || !payload.quan_huyen || !payload.diachi) {
            console.warn("‚ö†Ô∏è [addUserLocation] Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc");
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ b·∫Øt bu·ªôc." });
        }

        const currentCount = await locationService.countUserLocations(payload.manguoidung);
        console.log("üî¢ [addUserLocation] S·ªë ƒë·ªãa ch·ªâ hi·ªán t·∫°i:", currentCount);

        if (currentCount >= 5) {
            console.warn("‚ö†Ô∏è [addUserLocation] V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng ƒë·ªãa ch·ªâ cho ph√©p");
            return res.status(400).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ c√≥ t·ªëi ƒëa 5 ƒë·ªãa ch·ªâ." });
        }

        const insertedId = await locationService.addUserLocation(payload);
        console.log("‚úÖ [addUserLocation] ƒê√£ th√™m ƒë·ªãa ch·ªâ v·ªõi ID:", insertedId);

        return res.status(201).json({ message: "Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng", id: insertedId });
    } catch (error) {
        console.error("üî• [addUserLocation] L·ªói server:", error);
        return res.status(500).json({ message: `L·ªói server: ${error.message}` });
    }
};

exports.deleteUserLocation = async (req, res, next) => {
    try {
        const { id } = req.params;
        console.log("üì• [deleteUserLocation] ID c·∫ßn x√≥a:", id);

        if (!id) {
            console.warn("‚ö†Ô∏è [deleteUserLocation] Thi·∫øu m√£ ƒë·ªãa ch·ªâ c·∫ßn x√≥a");
            return res.status(400).json({ message: "Thi·∫øu m√£ ƒë·ªãa ch·ªâ c·∫ßn x√≥a." });
        }

        const locationService = new LocationService(MongoDB.client);
        const deleted = await locationService.deleteUserLocation(id);
        console.log("üóëÔ∏è [deleteUserLocation] K·∫øt qu·∫£:", deleted);

        if (!deleted) {
            console.warn("‚ùå [deleteUserLocation] Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ ƒë·ªÉ x√≥a");
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ ƒë·ªÉ x√≥a ho·∫∑c ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥." });
        }

        return res.json({ message: "ƒê√£ x√≥a ƒë·ªãa ch·ªâ kh·ªèi danh s√°ch th√†nh c√¥ng." });
    } catch (error) {
        console.error("üî• [deleteUserLocation] L·ªói server:", error);
        return res.status(500).json({ message: `L·ªói server: ${error.message}` });
    }
};

exports.getUserLocations = async (req, res, next) => {
    try {
        const { userId } = req.params;
        console.log("üì• [getUserLocations] userId:", userId);

        if (!userId) {
            console.warn("‚ö†Ô∏è [getUserLocations] Thi·∫øu userId trong params");
            return res.status(400).json({ message: "Thi·∫øu userId" });
        }

        const locationService = new LocationService(MongoDB.client);
        const locations = await locationService.getUserLocations(userId);
        console.log("üì¶ [getUserLocations] Danh s√°ch ƒë·ªãa ch·ªâ:", locations);

        return res.json(locations);
    } catch (error) {
        console.error("üî• [getUserLocations] L·ªói:", error);
        return res.status(500).json({ message: error.message });
    }
};;

exports.getListUsers = async (req, res, next) => {
    try {
        const userService = new UserService(MongoDB.client);
        const users = await userService.findAll();
        console.log("üì¶ [getListUsers] Danh s√°ch ng∆∞·ªùi d√πng:", users);

        if (!users.length) {
            console.warn("‚ö†Ô∏è [getListUsers] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o");
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o." });
        }

        return res.json(users);
    } catch (error) {
        console.error("üî• [getListUsers] L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
        return res.status(500).json({ message: `L·ªói khi l·∫•y danh s√°ch ƒë·ªôc gi·∫£: ${error.message}` });
    }
};

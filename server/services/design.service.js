const { ObjectId } = require("mongodb");

function toSlug(str) {
    return str
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-zA-Z0-9\s]/g, "")
        .trim()
        .toLowerCase()
        .replace(/\s+/g, "_");
}

class DesignService {
    constructor(client) {
        this.design = client.db().collection("designs");
        this.theloaisanpham = client.db().collection("theloaisanpham");
        this.nguoidung = client.db().collection("nguoidung");
        this.hinhanhsanpham = client.db().collection("hinhanhsanpham");
        this.thietkecuanguoidung = client.db().collection("thietkecuanguoidung");
        this.mausanpham = client.db().collection("mausanpham");
        this.sanpham = client.db().collection("sanpham");
    }

    async createDesign({ manguoidung, masanpham, mausac }) {
        // üõ°Ô∏è Ki·ªÉm tra input
        if (!ObjectId.isValid(manguoidung)) throw new Error("ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.");
        if (!ObjectId.isValid(masanpham)) throw new Error("ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
        if (!mausac || typeof mausac !== "string" || !/^#[0-9A-Fa-f]{6}$/.test(mausac.trim())) {
            throw new Error("M√†u s·∫Øc kh√¥ng h·ª£p l·ªá. ƒê·ªãnh d·∫°ng ph·∫£i l√† m√£ hex v√≠ d·ª•: #FF0000");
        }

        const userId = new ObjectId(manguoidung);
        const productId = new ObjectId(masanpham);
        const mau = mausac.trim();

        console.log("üü° [CREATE DESIGN] User:", userId.toString());
        console.log("üü° [CREATE DESIGN] Product:", productId.toString());
        console.log("üü° [CREATE DESIGN] Color:", mau);

        // üìå Ki·ªÉm tra ng∆∞·ªùi d√πng
        const user = await this.nguoidung.findOne({ _id: userId });
        if (!user) {
            return { success: false, message: "Vui l√≤ng ƒëƒÉng k√Ω ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng thi·∫øt k·∫ø." };
        }

        // üì¶ L·∫•y s·∫£n ph·∫©m
        const product = await this.sanpham.findOne({ _id: productId });
        if (!product) {
            return { success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ thi·∫øt k·∫ø." };
        }

        // üìö L·∫•y slug t·ª´ th·ªÉ lo·∫°i s·∫£n ph·∫©m
        let categoryId = null;
        if (ObjectId.isValid(product.theloai)) {
            categoryId = new ObjectId(product.theloai);
        } else {
            return { success: false, message: "ID th·ªÉ lo·∫°i trong s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá." };
        }

        const category = await this.theloaisanpham.findOne({ _id: categoryId });
        if (!category || !category.slug) {
            return { success: false, message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m." };
        }

        const slug = category.slug;

        // ‚úÖ T·∫°o b·∫£n thi·∫øt k·∫ø
        const tempResult = await this.design.insertOne({
            manguoidung: userId,
            masanpham: productId,
            mau,
            ngaytao: new Date()
        });

        const insertedId = tempResult.insertedId;
        const ten = `Thi·∫øt k·∫ø ${insertedId.toString()}`;
        const link = `${slug}/${insertedId.toString()}`;

        // üìù C·∫≠p nh·∫≠t t√™n & link cho thi·∫øt k·∫ø
        await this.design.updateOne({ _id: insertedId }, { $set: { ten, link } });

        // üß© T·∫°o thi·∫øt k·∫ø ng∆∞·ªùi d√πng cho 2 m·∫∑t (front, back)
        const inserts = ["front", "back"].map(vitri => ({
            madesign: insertedId,
            masanpham: productId,
            vitri,
            mau,
            overlays: [],
            createdAt: new Date()
        }));

        await this.thietkecuanguoidung.insertMany(inserts);

        console.log("üü¢ [CREATE DESIGN] Thi·∫øt k·∫ø v√† overlay ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.");

        // üì§ Tr·∫£ k·∫øt qu·∫£
        return {
            success: true,
            message: "Kh·ªüi t·∫°o thi·∫øt k·∫ø th√†nh c√¥ng.",
            id: insertedId,
            link // v√≠ d·ª•: "t-shirts/6868d5107b3ea89efb7ecf98"
        };
    }
    
    async getDesignsByUser(manguoidung) {
        try {
            if (!ObjectId.isValid(manguoidung)) {
                throw new Error("ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.");
            }

            if (!this.design) {
                throw new Error("Collection 'design' ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.");
            }

            const designs = await this.design
                .find(
                    { manguoidung: new ObjectId(manguoidung) },
                    {
                        projection: {
                            _id: 1,
                            manguoidung: 1,
                            theloai: 1,
                            ngaytao: 1,
                            link: 1,
                            ten: 1
                        }
                    }
                )
                .sort({ ngaytao: -1 }) // m·ªõi nh·∫•t l√™n tr∆∞·ªõc
                .toArray();

            return designs;

        } catch (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch thi·∫øt k·∫ø ƒë∆°n gi·∫£n:", err.message);
            throw new Error("L·ªói server khi l·∫•y danh s√°ch thi·∫øt k·∫ø.");
        }
    }

    async getDesignDetail(designId) {
        const design = await this.design.findOne({ _id: designId });
        if (!design) {
            return { success: false, message: "Kh√¥ng t√¨m th·∫•y thi·∫øt k·∫ø." };
        }

        const images = await this.thietkecuanguoidung.find({ madesign: designId }).toArray();

        return {
            success: true,
            message: "L·∫•y chi ti·∫øt thi·∫øt k·∫ø th√†nh c√¥ng.",
            design,
            images // ch·ª©a ·∫£nh front, back, overlay v.v.
        };
    }

    async getColorFromDesign(designId) {
        try {
            const objectId = new ObjectId(designId);

            // 1. L·∫•y th√¥ng tin thi·∫øt k·∫ø
            const designDoc = await this.thietkecuanguoidung.findOne({ madesign: objectId });

            if (!designDoc || !designDoc.masanpham) {
                return {
                    success: false,
                    message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ thi·∫øt k·∫ø."
                };
            }

            const productId = designDoc.masanpham;
            const designColor = designDoc.mau;

            // 2. L·∫•y danh s√°ch m√†u t·ª´ b·∫£ng mausanpham
            const colorDocs = await this.mausanpham
                .find({ masanpham: productId })
                .project({ mau: 1 })
                .toArray();

            if (!colorDocs || colorDocs.length === 0) {
                return {
                    success: false,
                    message: "Kh√¥ng t√¨m th·∫•y m√†u n√†o cho s·∫£n ph·∫©m n√†y."
                };
            }

            const uniqueColors = [...new Set(colorDocs.map(doc => doc.mau))];

            const matchedColor = uniqueColors.includes(designColor) ? designColor : uniqueColors[0];

            return {
                success: true,
                color: matchedColor,
                colors: uniqueColors
            };
        } catch (error) {
            console.error("üî• L·ªói getColorFromDesign:", error);
            return { success: false, message: "L·ªói server." };
        }
    }

    async deleteDesign(designId) {
        if (!ObjectId.isValid(designId)) {
            return { success: false, message: "ID kh√¥ng h·ª£p l·ªá." };
        }

        const objectId = new ObjectId(designId);
        console.log("üóëÔ∏è ƒêang x√≥a thi·∫øt k·∫ø c√≥ ID:", objectId);

        // X√≥a thi·∫øt k·∫ø ch√≠nh
        const result = await this.design.deleteOne({ _id: objectId });
        console.log("‚úÖ K·∫øt qu·∫£ x√≥a thi·∫øt k·∫ø:", result);

        // X√≥a thi·∫øt k·∫ø ng∆∞·ªùi d√πng li√™n quan (2 m·∫∑t)
        const relatedDelete = await this.thietkecuanguoidung.deleteMany({ madesign: objectId });
        console.log("üßπ ƒê√£ x√≥a thi·∫øt k·∫ø ng∆∞·ªùi d√πng li√™n quan:", relatedDelete.deletedCount);

        return {
            success: result.deletedCount === 1,
            message: result.deletedCount === 1
                ? "ƒê√£ x√≥a thi·∫øt k·∫ø v√† d·ªØ li·ªáu li√™n quan."
                : "Kh√¥ng t√¨m th·∫•y thi·∫øt k·∫ø ƒë·ªÉ x√≥a."
        };
    }

    async renameDesign(designId, newTen) {
        if (!ObjectId.isValid(designId)) return { success: false, message: "ID kh√¥ng h·ª£p l·ªá." };
        const result = await this.design.updateOne(
            { _id: new ObjectId(designId) },
            { $set: { ten: newTen } }
        );
        return {
            success: result.modifiedCount === 1,
            message: result.modifiedCount === 1 ? "ƒê√£ ƒë·ªïi t√™n th√†nh c√¥ng" : "Kh√¥ng t√¨m th·∫•y thi·∫øt k·∫ø"
        };
    }

}

module.exports = DesignService;

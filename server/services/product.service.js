const { ObjectId } = require("mongodb");
const port = require("../config").app.port;
class ProductServer {
    constructor(client) {
        this.sanpham = client.db().collection("sanpham");
        this.kichthuoc = client.db().collection("kichthuoc");
        this.mausanpham = client.db().collection("mausanpham");
        this.hinhanhsanpham = client.db().collection("hinhanhsanpham");
        this.theloaisanpham = client.db().collection("theloaisanpham");
    }

    extractProductData(payload) {
        return {
            tensanpham: payload.tensanpham || '',
            giasanpham: Number(payload.giasanpham) || 0,
            theloai: payload.theloai || '',
            mota: payload.mota || '',
            ngaythem: new Date(),
            kichthuoc: Array.isArray(payload.kichthuoc) ? payload.kichthuoc : [],
            mausanpham: Array.isArray(payload.mausanpham) ? payload.mausanpham : [],
            hinhanh: Array.isArray(payload.hinhanh) ? payload.hinhanh : [],
        }
    }

    async createProduct(payload) {
        const productData = this.extractProductData(payload);

        try {
            // 1. T·∫°o s·∫£n ph·∫©m ch√≠nh trong collection "sanpham"
            const result = await this.sanpham.insertOne({
                tensanpham: productData.tensanpham,
                giasanpham: productData.giasanpham,
                theloai: productData.theloai,
                mota: productData.mota,
                ngaythem: productData.ngaythem,
            });

            const productId = result.insertedId;

            // 2. T·∫°o danh s√°ch m√†u s·∫Øc
            const mauDocs = productData.mausanpham.map(mau => ({
                masanpham: productId,
                mau: mau.trim()
            }));

            // 3. T·∫°o danh s√°ch k√≠ch th∆∞·ªõc
            const kichthuocDocs = productData.kichthuoc.map(item => ({
                masanpham: productId,
                size: item.size,
                soluong: item.soluong
            }));

            // 4. T·∫°o danh s√°ch h√¨nh ·∫£nh
            const hinhanhDocs = productData.hinhanh.map(img => ({
                masanpham: productId,
                tenfile: img.tenfile
            }));

            // 5. L∆∞u v√†o c√°c collection ph·ª• n·∫øu c√≥ d·ªØ li·ªáu
            if (mauDocs.length > 0) {
                await this.mausanpham.insertMany(mauDocs);
            }
            if (kichthuocDocs.length > 0) {
                await this.kichthuoc.insertMany(kichthuocDocs);
            }
            if (hinhanhDocs.length > 0) {
                await this.hinhanhsanpham.insertMany(hinhanhDocs);
            }

            // 6. Tr·∫£ v·ªÅ s·∫£n ph·∫©m ƒë√£ t·∫°o
            return {
                _id: productId,
                ...productData
            };
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
            throw error;
        }
    }

    async getCategoryNameById(theloaiId) {
        try {
            // N·∫øu l√† ObjectId d·∫°ng chu·ªói th√¨ convert
            const id = typeof theloaiId === 'string' && ObjectId.isValid(theloaiId)
                ? new ObjectId(theloaiId)
                : theloaiId;

            const category = await this.theloaisanpham.findOne({ _id: id });
            return category?.tendanhmuc || null;
        } catch (error) {
            console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t√™n th·ªÉ lo·∫°i:", error.message);
            return null;
        }
    }

    async getAllProducts() {
        try {
            const products = await this.sanpham.find({}).toArray();

            // S·ª≠ d·ª•ng Promise.all ƒë·ªÉ x·ª≠ l√Ω song song
            const enrichedProducts = await Promise.all(products.map(async (product) => {
                const productId = product._id.toString();

                // Th·ªÉ lo·∫°i
                const tentheloai = await this.getCategoryNameById(product.theloai);

                // K√≠ch th∆∞·ªõc
                const kichthuoc = await this.kichthuoc.find({ masanpham: productId }).toArray();

                // M√†u s·∫Øc
                const mausanpham = await this.mausanpham.find({ masanpham: productId }).toArray();

                // H√¨nh ·∫£nh
                const hinhAnhList = await this.hinhanhsanpham.find({ masanpham: productId }).toArray();
                const hinhanh = hinhAnhList.map(img => ({
                    ...img,
                    url: img.tenfile ? `/images/${img.tenfile}` : null
                }));

                return {
                    ...product,
                    // tentheloai,
                    kichthuoc,
                    mausanpham,
                    hinhanh
                };
            }));

            return enrichedProducts;
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m.");
        }
    }


    async getProductById(id) {
        try {
            if (!ObjectId.isValid(id)) {
                return {
                    success: false,
                    message: "ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá",
                };
            }

            const objectId = new ObjectId(id);

            const product = await this.sanpham.findOne({ _id: objectId });
            if (!product) {
                return {
                    success: false,
                    message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m",
                };
            }

            // ‚úÖ T√≠ch h·ª£p l·∫•y t√™n th·ªÉ lo·∫°i
            product.tentheloai = await this.getCategoryNameById(product.theloai);

            // üîç L·∫•y k√≠ch th∆∞·ªõc
            product.kichthuoc = await this.kichthuoc.find({ masanpham: objectId }).toArray();

            // üé® L·∫•y m√†u s·∫Øc
            const mausanpham = await this.mausanpham.find({ masanpham: objectId }).toArray();
            product.mausanpham = mausanpham.map(mau => mau.mau);

            // üñºÔ∏è L·∫•y h√¨nh ·∫£nh (t·∫°o URL ƒë·∫ßy ƒë·ªß)
            const hinhanh = await this.hinhanhsanpham.find({ masanpham: objectId }).toArray();
            product.hinhanh = hinhanh.map(img => ({
                _id: img._id,
                tenfile: img.tenfile,
                url: `http://localhost:${port}/images/${img.tenfile}`
            }));

            return {
                success: true,
                data: product,
            };
        } catch (error) {
            console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID:", error);
            return {
                success: false,
                message: "ƒê√£ x·∫£y ra l·ªói khi truy v·∫•n s·∫£n ph·∫©m",
                error: error.message,
            };
        }
    }


    async updateProduct(id, payload, files) {
        try {
            const objectId = new ObjectId(id);

            // 1. Parse c√°c tr∆∞·ªùng
            const kichthuoc = Array.isArray(payload.kichthuoc)
                ? payload.kichthuoc
                : JSON.parse(payload.kichthuoc || "[]");

            const mausanpham = Array.isArray(payload.mausanpham)
                ? payload.mausanpham
                : JSON.parse(payload.mausanpham || "[]");

            // H√¨nh ·∫£nh c≈© (gi·ªØ l·∫°i)
            const hinhanhCu = payload.hinhanhCu
                ? (Array.isArray(payload.hinhanhCu) ? payload.hinhanhCu : JSON.parse(payload.hinhanhCu))
                : [];

            // Danh s√°ch _id ·∫£nh c·∫ßn x√≥a
            const hinhanhXoa = payload.hinhanhXoa
                ? (Array.isArray(payload.hinhanhXoa) ? payload.hinhanhXoa : JSON.parse(payload.hinhanhXoa))
                : [];

            // 2. C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m ch√≠nh
            await this.sanpham.updateOne(
                { _id: objectId },
                {
                    $set: {
                        tensanpham: payload.tensanpham,
                        giasanpham: payload.giasanpham,
                        theloai: payload.theloai,
                        mota: payload.mota,
                        ngaythem: payload.ngaythem,
                    },
                }
            );

            // 3. C·∫≠p nh·∫≠t m√†u s·∫Øc
            await this.mausanpham.deleteMany({ masanpham: objectId });
            const mauDocs = mausanpham.map(mau => ({
                masanpham: objectId,
                mau: mau.trim(),
            }));
            if (mauDocs.length > 0) {
                await this.mausanpham.insertMany(mauDocs);
            }

            // 4. C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc
            await this.kichthuoc.deleteMany({ masanpham: objectId });
            const kichThuocDocs = kichthuoc.map(sizeObj => ({
                masanpham: objectId,
                size: sizeObj.size,
                soluong: sizeObj.soluong,
            }));
            if (kichThuocDocs.length > 0) {
                await this.kichthuoc.insertMany(kichThuocDocs);
            }

            // 5. C·∫≠p nh·∫≠t h√¨nh ·∫£nh
            // a. Danh s√°ch ·∫£nh hi·ªán c√≥ trong DB
            const existingImages = await this.hinhanhsanpham.find({ masanpham: objectId }).toArray();
            const existingImgMap = new Map(existingImages.map(img => [img.tenfile, img]));

            // b. Danh s√°ch ·∫£nh c·∫ßn gi·ªØ l·∫°i (·∫£nh c≈© + ·∫£nh upload m·ªõi)
            const newImages = [
                ...hinhanhCu.map(img => ({ tenfile: img.tenfile })),
                ...(Array.isArray(files) ? files.map(file => ({ tenfile: file.filename })) : []),
            ];
            const newImgSet = new Set(newImages.map(img => img.tenfile));

            // c. Th√™m ·∫£nh m·ªõi ch∆∞a c√≥ trong DB
            for (const img of newImages) {
                if (!existingImgMap.has(img.tenfile)) {
                    await this.hinhanhsanpham.insertOne({
                        masanpham: objectId,
                        tenfile: img.tenfile,
                    });
                }
            }

            // d. X√≥a ·∫£nh ƒë√£ b·ªã lo·∫°i b·ªè (theo _id)
            if (Array.isArray(hinhanhXoa) && hinhanhXoa.length > 0) {
                for (const imgId of hinhanhXoa) {
                    try {
                        await this.hinhanhsanpham.deleteOne({ _id: new ObjectId(imgId) });
                    } catch (err) {
                        console.error("L·ªói khi x√≥a ·∫£nh theo _id:", imgId, err);
                    }
                }
            }

            return {
                success: true,
                message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng.",
            };
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
            return {
                success: false,
                message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i: " + error.message,
            };
        }
    }


    async deleteProduct(id) {
        try {
            const objectId = new ObjectId(id);
            await this.sanpham.deleteOne({ _id: objectId });
            await this.kichthuoc.deleteMany({ masanpham: id });
            await this.mausanpham.deleteMany({ masanpham: id });
            await this.hinhanhsanpham.deleteMany({ masanpham: id });

            return { message: "ƒê√£ xo√° s·∫£n ph·∫©m v√† d·ªØ li·ªáu li√™n quan" };
        } catch (error) {
            console.error("L·ªói xo√° s·∫£n ph·∫©m:", error);
            throw new Error("Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m.");
        }
    }

    async searchProductByName(name) {
        try {
            const regex = new RegExp(name, "i");
            return await this.sanpham.find({ tensanpham: { $regex: regex } }).toArray();
        } catch (error) {
            console.error("L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m:", error);
            throw new Error("Kh√¥ng th·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m.");
        }
    }

    async getCategoryNameById(theloaiId) {
        try {
            const id = typeof theloaiId === 'string' && ObjectId.isValid(theloaiId)
                ? new ObjectId(theloaiId)
                : theloaiId;

            const query = ObjectId.isValid(id) ? { _id: id } : { _id: new ObjectId() }; // tr√°nh l·ªói
            const category = await this.theloaisanpham.findOne(query);

            return category?.tendanhmuc || null;
        } catch (error) {
            console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t√™n th·ªÉ lo·∫°i:", error.message);
            return null;
        }
    }



    async getAllProducts() {
        try {
            // L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
            const products = await this.sanpham.find({}).toArray();

            // L·∫•y to√†n b·ªô k√≠ch th∆∞·ªõc, m√†u s·∫Øc, h√¨nh ·∫£nh m·ªôt l·∫ßn duy nh·∫•t
            const allKichThuoc = await this.kichthuoc.find({}).toArray();
            const allMauSac = await this.mausanpham.find({}).toArray();
            const allHinhAnh = await this.hinhanhsanpham.find({}).toArray();

            // G·ªôp d·ªØ li·ªáu theo masanpham
            const kichThuocMap = {};
            const mauSacMap = {};
            const hinhAnhMap = {};

            for (const kt of allKichThuoc) {
                const pid = kt.masanpham.toString();
                if (!kichThuocMap[pid]) kichThuocMap[pid] = [];
                kichThuocMap[pid].push(kt);
            }

            for (const mau of allMauSac) {
                const pid = mau.masanpham.toString();
                if (!mauSacMap[pid]) mauSacMap[pid] = [];
                mauSacMap[pid].push(mau.mau); // Ch·ªâ l·∫•y tr∆∞·ªùng `mau`
            }

            for (const img of allHinhAnh) {
                const pid = img.masanpham.toString();
                if (!hinhAnhMap[pid]) hinhAnhMap[pid] = [];
                hinhAnhMap[pid].push({
                    _id: img._id,
                    tenfile: img.tenfile,
                    url: `http://localhost:${port}/images/${img.tenfile}`
                });
            }

            // Duy·ªát t·ª´ng s·∫£n ph·∫©m v√† g·∫Øn d·ªØ li·ªáu li√™n quan
            for (const product of products) {
                const productId = product._id.toString();

                // G√°n t√™n th·ªÉ lo·∫°i
                product.tentheloai = await this.getCategoryNameById(product.theloai);

                // G√°n k√≠ch th∆∞·ªõc
                product.kichthuoc = kichThuocMap[productId] || [];

                // G√°n m√†u s·∫Øc
                product.mausanpham = mauSacMap[productId] || [];

                // G√°n h√¨nh ·∫£nh
                product.hinhanh = hinhAnhMap[productId] || [];
            }

            return {
                success: true,
                data: products
            };

        } catch (error) {
            console.error("L·ªói l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
            return {
                success: false,
                message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m.",
                error: error.message
            };
        }
    }
}

module.exports = ProductServer;
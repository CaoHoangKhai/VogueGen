const { ObjectId } = require("mongodb");

class CartService {
    constructor(client) {
        this.cart = client.db().collection("giohang");
        this.sanpham = client.db().collection("sanpham");
        this.hinhanhsanpham = client.db().collection("hinhanhsanpham");
    }

    extractCartData(payload) {
        return {
            manguoidung: payload.manguoidung ? new ObjectId(payload.manguoidung) : null,
            masanpham: payload.masanpham ? new ObjectId(payload.masanpham) : null,
            soluong: payload.soluong || 1,
            size: payload.size || null,
            mausac: payload.mausac || null,
            madesign: payload.madesign ? new ObjectId(payload.madesign) : null,
            mathietke: payload.mathietke ? new ObjectId(payload.mathietke) : null,
            isThietKe: payload.isThietKe || false,

            // üÜï Th√™m 2 tr∆∞·ªùng n√†y ƒë·ªÉ nh·∫≠n t·ª´ frontend
            previewFront: payload.previewFront || null,
            previewBack: payload.previewBack || null,
        };
    }

    async addToCart(payload) {
        try {
            const data = this.extractCartData(payload);

            // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu c·∫ßn thi·∫øt
            if (!data.manguoidung) return { success: false, message: "‚ùå Thi·∫øu ID ng∆∞·ªùi d√πng." };
            if (!data.masanpham) return { success: false, message: "‚ùå Thi·∫øu ID s·∫£n ph·∫©m." };
            if (!data.size) return { success: false, message: "‚ùå Thi·∫øu size s·∫£n ph·∫©m." };
            if (!data.mausac) return { success: false, message: "‚ùå Thi·∫øu m√†u s·∫Øc s·∫£n ph·∫©m." };

            // ‚úÖ ∆Øu ti√™n mathietke n·∫øu ch∆∞a c√≥ madesign
            if (data.mathietke && !data.madesign) {
                data.madesign = data.mathietke;
            }

            // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu/t·ªëi ƒëa
            if ((data.isThietKe || data.madesign) && data.soluong < 50) {
                data.soluong = 50;
            }
            if (data.soluong > 10000) {
                data.soluong = 10000;
            }

            // üî• T·∫°o query theo s·∫£n ph·∫©m v√† thi·∫øt k·∫ø
            const query = {
                manguoidung: data.manguoidung,
                masanpham: data.masanpham,
                size: data.size,
                mausac: data.mausac,
                madesign: data.madesign || null,
            };

            // ============================
            // N·∫øu l√† design th√¨ **KH√îNG** t√¨m, lu√¥n insert m·ªõi
            // N·∫øu kh√¥ng ph·∫£i design th√¨ check t·ªìn t·∫°i ƒë·ªÉ update
            // ============================
            if (!data.isThietKe && !data.madesign) {
                // S·∫£n ph·∫©m g·ªëc -> t√¨m s·∫£n ph·∫©m t·ªìn t·∫°i
                const existed = await this.cart.findOne(query);

                if (existed) {
                    if (existed.soluong >= 10000) {
                        return {
                            success: true,
                            message: "‚ö†Ô∏è S·∫£n ph·∫©m n√†y ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng t·ªëi ƒëa (10.000) cho size n√†y.",
                        };
                    }

                    const newQuantity = existed.soluong + data.soluong;
                    const finalQuantity = Math.min(newQuantity, 10000);

                    const updateData = { soluong: finalQuantity };
                    // C·∫≠p nh·∫≠t ·∫£nh thi·∫øt k·∫ø n·∫øu c√≥ (ƒë·ªëi v·ªõi s·∫£n ph·∫©m g·ªëc th√¨ th∆∞·ªùng kh√¥ng c√≥)
                    if (data.isThietKe || data.madesign) {
                        if (data.previewFront) updateData.hinhanhFront = data.previewFront;
                        if (data.previewBack) updateData.hinhanhBack = data.previewBack;
                    }

                    await this.cart.updateOne(
                        { _id: existed._id },
                        { $set: updateData }
                    );

                    if (newQuantity > 10000) {
                        return {
                            success: true,
                            message: "‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n t·ªëi ƒëa 10.000 s·∫£n ph·∫©m. Ch·ªâ th√™m ƒë·ªß ƒë·ªÉ ƒë·∫°t 10.000.",
                        };
                    } else {
                        return {
                            success: true,
                            message: "‚úÖ ƒê√£ tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.",
                        };
                    }
                }
            }

            // ============================
            // Insert m·ªõi (lu√¥n insert m·ªõi v·ªõi design, ho·∫∑c insert m·ªõi n·∫øu s·∫£n ph·∫©m g·ªëc ch∆∞a t·ªìn t·∫°i)
            // ============================
            await this.cart.insertOne({
                manguoidung: data.manguoidung,
                masanpham: data.masanpham,
                size: data.size,
                mausac: data.mausac,
                soluong: data.soluong,
                madesign: data.madesign || null,
                ...(data.isThietKe && { isThietKe: true }),
                ...(data.previewFront && { hinhanhFront: data.previewFront }),
                ...(data.previewBack && { hinhanhBack: data.previewBack }),
                createdAt: new Date(),
            });

            return { success: true, message: "‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng." };

        } catch (err) {
            return { success: false, message: `‚ùå L·ªói h·ªá th·ªëng khi th√™m gi·ªè h√†ng: ${err.message}` };
        }
    }

    async getCartByUserId(userId) {
        try {
            if (!ObjectId.isValid(userId)) {
                return { success: false, message: "‚ùå ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá." };
            }
            const uid = new ObjectId(userId);

            // üõí L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
            const cartItems = await this.cart.find({ manguoidung: uid }).toArray();
            if (!cartItems.length) return [];

            // üîÑ Duy·ªát t·ª´ng item trong gi·ªè
            const result = await Promise.all(
                cartItems.map(async (item) => {
                    // üì¶ L·∫•y th√¥ng tin s·∫£n ph·∫©m
                    const product = await this.sanpham.findOne({ _id: new ObjectId(item.masanpham) });

                    // üé® N·∫øu l√† s·∫£n ph·∫©m thi·∫øt k·∫ø
                    if (item.isThietKe) {
                        // ‚úÖ N·∫øu ƒë√£ c√≥ c·∫£ front ho·∫∑c back => tr·∫£ v·ªÅ ƒë√∫ng nh∆∞ hi·ªán t·∫°i
                        if (item.hinhanhFront || item.hinhanhBack) {
                            return {
                                _id: item._id,
                                manguoidung: item.manguoidung,
                                masanpham: item.masanpham,
                                soluong: item.soluong,
                                size: item.size,
                                mausac: item.mausac,
                                madesign: item.madesign || null,
                                tensanpham: product?.tensanpham || "S·∫£n ph·∫©m thi·∫øt k·∫ø",
                                giasanpham: product?.giasanpham ?? 400000,
                                hinhanhFront: item.hinhanhFront || null,
                                hinhanhBack: item.hinhanhBack || null,
                                designLink: product ? `${product.loaisanpham}/${item.madesign}` : null
                            };
                        }

                        // ‚úÖ N·∫øu KH√îNG c√≥ h√¨nh ·∫£nh thi·∫øt k·∫ø ‚Üí fallback gi·ªëng s·∫£n ph·∫©m th∆∞·ªùng
                        const color = typeof item.mausac === "string" ? item.mausac.trim().toUpperCase() : null;
                        let image = await this.hinhanhsanpham.findOne({
                            masanpham: item.masanpham,
                            mau: color,
                            vitri: "front"
                        }) ||
                            await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, mau: color }) ||
                            await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, vitri: "front" }) ||
                            await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, vitri: "back" });

                        let imageSrc = null;
                        if (image?.data?.buffer) {
                            const base64 = image.data.buffer.toString("base64");
                            imageSrc = `data:${image.contentType};base64,${base64}`;
                        }

                        return {
                            _id: item._id,
                            manguoidung: item.manguoidung,
                            masanpham: item.masanpham,
                            soluong: item.soluong,
                            size: item.size,
                            mausac: item.mausac,
                            madesign: item.madesign || null,
                            tensanpham: product?.tensanpham || "S·∫£n ph·∫©m thi·∫øt k·∫ø",
                            giasanpham: product?.giasanpham ?? 400000,
                            hinhanh: imageSrc, // üîÑ fallback sang field hinhanh
                            designLink: product ? `${product.loaisanpham}/${item.madesign}` : null
                        };
                    }

                    // üñº N·∫øu l√† s·∫£n ph·∫©m th∆∞·ªùng -> t√¨m ·∫£nh trong `hinhanhsanpham`
                    const color = typeof item.mausac === "string" ? item.mausac.trim().toUpperCase() : null;
                    let image = await this.hinhanhsanpham.findOne({
                        masanpham: item.masanpham,
                        mau: color,
                        vitri: "front"
                    }) ||
                        await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, mau: color }) ||
                        await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, vitri: "front" }) ||
                        await this.hinhanhsanpham.findOne({ masanpham: item.masanpham, vitri: "back" });

                    let imageSrc = null;
                    if (image?.data?.buffer) {
                        const base64 = image.data.buffer.toString("base64");
                        imageSrc = `data:${image.contentType};base64,${base64}`;
                    }

                    return {
                        _id: item._id,
                        manguoidung: item.manguoidung,
                        masanpham: item.masanpham,
                        soluong: item.soluong,
                        size: item.size,
                        mausac: item.mausac,
                        madesign: null,
                        tensanpham: product?.tensanpham || null,
                        giasanpham: product?.giasanpham || null,
                        hinhanh: imageSrc
                    };
                })
            );

            return result;
        } catch (err) {
            return { success: false, message: `‚ùå L·ªói khi l·∫•y gi·ªè h√†ng: ${err.message}` };
        }
    }


    async increaseQuantity(cartId) {
        try {
            if (!ObjectId.isValid(cartId)) return { success: false, message: "‚ùå ID gi·ªè h√†ng kh√¥ng h·ª£p l·ªá." };
            const item = await this.cart.findOne({ _id: new ObjectId(cartId) });
            if (!item) return { success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." };

            if (item.soluong >= 10000) {
                return { success: false, message: "‚ö†Ô∏è S·ªë l∆∞·ª£ng t·ªëi ƒëa l√† 10.000." };
            }

            await this.cart.updateOne({ _id: item._id }, { $inc: { soluong: 1 } });
            return { success: true, message: "‚úÖ ƒê√£ tƒÉng s·ªë l∆∞·ª£ng." };
        } catch (err) {
            return { success: false, message: `‚ùå L·ªói khi tƒÉng s·ªë l∆∞·ª£ng: ${err.message}` };
        }
    }

    async decreaseQuantity(cartId) {
        try {
            if (!ObjectId.isValid(cartId)) return { success: false, message: "‚ùå ID gi·ªè h√†ng kh√¥ng h·ª£p l·ªá." };

            const item = await this.cart.findOne({ _id: new ObjectId(cartId) });
            if (!item) return { success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." };

            if (item.isThietKe || item.madesign) {
                if (item.soluong <= 50) {
                    return { success: false, message: "‚ö†Ô∏è S·∫£n ph·∫©m thi·∫øt k·∫ø t·ªëi thi·ªÉu l√† 50." };
                }
            }

            if (item.soluong > 1) {
                await this.cart.updateOne({ _id: item._id }, { $inc: { soluong: -1 } });
                return { success: true, message: "‚úÖ ƒê√£ gi·∫£m s·ªë l∆∞·ª£ng." };
            } else {
                await this.cart.deleteOne({ _id: item._id });
                return { success: true, message: "üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng." };
            }
        } catch (err) {
            return { success: false, message: `‚ùå L·ªói khi gi·∫£m s·ªë l∆∞·ª£ng: ${err.message}` };
        }
    }

    async updateQuantity(cartId, quantity) {
        try {
            if (!ObjectId.isValid(cartId))
                return { success: false, message: "‚ùå ID gi·ªè h√†ng kh√¥ng h·ª£p l·ªá." };

            const item = await this.cart.findOne({ _id: new ObjectId(cartId) });
            if (!item)
                return { success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." };

            if (quantity > 10000) quantity = 10000;

            if (quantity === 0) {
                await this.cart.deleteOne({ _id: new ObjectId(cartId) });
                return { success: true, message: "üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng." };
            }

            if ((item.isThietKe || item.madesign) && quantity < 50) {
                return { success: false, message: "‚ö†Ô∏è S·∫£n ph·∫©m thi·∫øt k·∫ø t·ªëi thi·ªÉu s·ªë l∆∞·ª£ng l√† 50." };
            }

            const result = await this.cart.updateOne(
                { _id: new ObjectId(cartId) },
                { $set: { soluong: quantity } }
            );

            if (result.matchedCount === 0) {
                return { success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m." };
            }

            if (result.modifiedCount === 0) {
                // ‚úÖ C√≥ match, nh∆∞ng s·ªë l∆∞·ª£ng kh√¥ng thay ƒë·ªïi
                return { success: true, message: "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng thay ƒë·ªïi (ƒë√£ gi·ªëng tr∆∞·ªõc ƒë√≥)." };
            }

            return { success: true, message: "‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng." };
        } catch (err) {
            return { success: false, message: `‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: ${err.message}` };
        }
    }

}

module.exports = CartService;
